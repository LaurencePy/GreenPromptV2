(()=>{"use strict";function t(t){return t?t.trim().split(/\s+|(?=[,.!?:;])/).filter(Boolean):[]}document.addEventListener("DOMContentLoaded",(()=>{const e=document.getElementById("options-btn");e&&e.addEventListener("click",(()=>{chrome.runtime.openOptionsPage()}));const n=document.getElementById("prompt-input"),o=document.getElementById("optimize-btn"),r=(document.getElementById("help-btn"),document.getElementById("status")),i=(document.getElementById("optimized-output"),document.getElementById("input-tokens")),s=document.getElementById("output-tokens");if(!o)return console.error("Element with ID 'optimize-btn' not found!"),void(r&&(r.textContent="Error: Optimize button not found in HTML."));r&&(r.textContent=""),o.disabled=!1,o.addEventListener("click",(async()=>{const e="Optimize & Copy",a=n.value.trim();a?(r.textContent="",o.disabled=!0,o.textContent="Optimizing...",chrome.storage.sync.get("hfApiKey",(async u=>{const l=u.hfApiKey;if(!l)return r.textContent="Hugging Face API Key not set. Please set it in the settings.",o.disabled=!1,void(o.textContent=e);try{const e=await async function(e,n){document.getElementById("status");const o=t(e).length,r={inputs:`Rewrite the following prompt to be as short as possible without changing its meaning. Remove all politeness markers and unnecessary words.\nReturn ONLY the rewritten prompt, with NO extra words, explanations, or quotes.\nInput prompt: """${e}"""`,parameters:{max_new_tokens:60,temperature:.1,do_sample:!1,early_stopping:!0}},i=await fetch("https://api-inference.huggingface.co/models/mistralai/Mixtral-8x7B-Instruct-v0.1",{method:"POST",headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/json"},body:JSON.stringify(r)});if(!i.ok){const t=await i.text();console.error(`Hugging Face API Error (${i.status}): ${i.statusText}`,t);let e="API request failed.";try{const n=JSON.parse(t);n.error?e=n.error:n.detail&&(e=n.detail)}catch(n){e=t.substring(0,200)}throw new Error(`Hugging Face API error (${i.status}). Details: ${e}`)}const s=await i.json();if(Array.isArray(s)&&s.length>0){const e=s[0]?.generated_text||s[0]?.summary_text;if(e){const n=function(t){if(!t)return"";const e=t.trim().split("\n");let n="";for(let t=e.length-1;t>=0;t--){const o=e[t].trim();if(o){n=o;break}}return n=n.replace(/^.*?:\s*/,""),n=n.replace(/^["']+|["']+$/g,""),n.trim()}(e);return{rewrittenText:n,inputTokens:o,outputTokens:t(n).length}}}return console.warn("API response was not in the expected format:",s),null}(a,l);if(!e||!e.rewrittenText)throw new Error("The API did not return a valid rewritten prompt.");n.value=e.rewrittenText,await navigator.clipboard.writeText(e.rewrittenText),i.textContent=e.inputTokens,s.textContent=e.outputTokens,Math.max(0,e.inputTokens-e.outputTokens),localStorage.setItem("lastPrompt",e.rewrittenText),o.textContent="Optimised & Copied!"}catch(t){console.error("An error occurred during optimization:",t),r.textContent=`Error: ${t.message}`,o.textContent="Error!"}finally{setTimeout((()=>{o.disabled=!1,o.textContent=e}),2e3)}}))):r.textContent="Please enter a prompt."}))}))})();